tmp <- edgeR::DGEList(counts=selected_data$dataset, group=groups)
print(tmp)
return(tmp)
}
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
params$characteristic_features_strategy <- multeve_GetCharacteristicFeatures
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
View(test)
plotMDS(test, method="bcv", col=as.numeric(test$samples$group))
cpm(test)
dim(test)
ncol(test)
nrow(test)
rownames(test)
test
dim(test)
test$counts
cpm(test$counts)
cpm(test$samples)
cpm(test)
edgeR::cpm(test)
tmp <- edgeR::DGEList(counts=selected_data$dataset, group=groups)
multeve_GetCharacteristicFeatures <- function(cluster, selected_data, params,
FC_threshold=4, pvalue_threshold=0.001, is_rna=TRUE) {
#' Get over-expressed features by calling the function `FindMarkers` of the edgeR package.
#' Only genes with log2FC > 4 and p-values (corrected with Bonferonni) < 0.001 are returned.
#'
#' @param cluster a named lists, with five names:
#' `base_clusters`, `samples`, `clustering_methods`, `label` and `robustness`.
#' @param selected_data a named list, with two names: `dataset` and `SeuratObject`.
#' @param params a list of parameters (cf. `feve::get_parameters()`).
#' @param FC_threshold a numeric.
#' @param pvalue_threshold a numeric.
#' @param is_rna a boolean indicating if the data should be transformed.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
samples_of_recursion <- colnames(selected_data$dataset)
is_in_cluster <- function(sample) {ifelse(sample %in% cluster$samples, 1, 0)}
n_samples_in <- sum(is_in_cluster(samples_of_recursion))
n_samples_out <- length(samples_of_recursion) - n_samples_in
if (n_samples_in < 3 | n_samples_out < 3) {return(c())}
groups <- factor(is_in_cluster(samples_of_recursion))
tmp <- edgeR::DGEList(counts=selected_data$dataset, group=groups)
return(tmp)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
test
tmp <- test
tmp <- edgeR::estimateDisp(tmp)
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an 'in' group, with regards to an 'out' group.
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of labels.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
return(test_results)
}
multeve_GetCharacteristicFeatures <- function(cluster, selected_data, params,
FC_threshold=4, pvalue_threshold=0.001, is_rna=TRUE) {
#' Get over-expressed features by calling the function `FindMarkers` of the edgeR package.
#' Only genes with log2FC > 4 and p-values (corrected with Bonferonni) < 0.001 are returned.
#'
#' @param cluster a named lists, with five names:
#' `base_clusters`, `samples`, `clustering_methods`, `label` and `robustness`.
#' @param selected_data a named list, with two names: `dataset` and `SeuratObject`.
#' @param params a list of parameters (cf. `feve::get_parameters()`).
#' @param FC_threshold a numeric.
#' @param pvalue_threshold a numeric.
#' @param is_rna a boolean indicating if the data should be transformed.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
samples_of_recursion <- colnames(selected_data$dataset)
is_in_cluster <- function(sample) {ifelse(sample %in% cluster$samples, 1, 0)}
n_samples_in <- sum(is_in_cluster(samples_of_recursion))
n_samples_out <- length(samples_of_recursion) - n_samples_in
if (n_samples_in < 3 | n_samples_out < 3) {return(c())}
groups <- factor(is_in_cluster(samples_of_recursion))
output <- get_over_expressed_features(selected_data$dataset, groups)
return(output)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
test
test$table
test$comparison
test$genes
topTags(test)
edgeR::topTags(test)
test <- test$table
test
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)$table
return(test_results)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
x <- edgeR::topTags(test, n=nrow(test))
test
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
return(test_results)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
x <- edgeR::topTags(test, n=nrow(test))
x
nrow(x)
nrow(test$table)
nrow(test)
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
return(test_results)
}
multeve_GetCharacteristicFeatures <- function(cluster, selected_data, params,
FC_threshold=4, pvalue_threshold=0.001, is_rna=TRUE) {
#' Get over-expressed features by calling the function `FindMarkers` of the edgeR package.
#' Only genes with logFC > 4 and FDR < 0.001 are returned.
#'
#' @param cluster a named lists, with five names:
#' `base_clusters`, `samples`, `clustering_methods`, `label` and `robustness`.
#' @param selected_data a named list, with two names: `dataset` and `SeuratObject`.
#' @param params a list of parameters (cf. `feve::get_parameters()`).
#' @param FC_threshold a numeric.
#' @param pvalue_threshold a numeric.
#' @param is_rna a boolean indicating if the data should be transformed.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
samples_of_recursion <- colnames(selected_data$dataset)
is_in_cluster <- function(sample) {ifelse(sample %in% cluster$samples, 1, 0)}
n_samples_in <- sum(is_in_cluster(samples_of_recursion))
n_samples_out <- length(samples_of_recursion) - n_samples_in
if (n_samples_in < 3 | n_samples_out < 3) {return(c())}
groups <- factor(is_in_cluster(samples_of_recursion))
output <- get_over_expressed_features(selected_data$dataset, groups)
return(output)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
test
test
test$table
test$adjust.method
test$comparison
test$test
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
return(test_results$table)
}
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
return(test_results$table)
}
multeve_GetCharacteristicFeatures <- function(cluster, selected_data, params,
FC_threshold=4, pvalue_threshold=0.001, is_rna=TRUE) {
#' Get over-expressed features by calling the function `FindMarkers` of the edgeR package.
#' Only genes with logFC > 4 and FDR < 0.001 are returned.
#'
#' @param cluster a named lists, with five names:
#' `base_clusters`, `samples`, `clustering_methods`, `label` and `robustness`.
#' @param selected_data a named list, with two names: `dataset` and `SeuratObject`.
#' @param params a list of parameters (cf. `feve::get_parameters()`).
#' @param FC_threshold a numeric.
#' @param pvalue_threshold a numeric.
#' @param is_rna a boolean indicating if the data should be transformed.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
samples_of_recursion <- colnames(selected_data$dataset)
is_in_cluster <- function(sample) {ifelse(sample %in% cluster$samples, 1, 0)}
n_samples_in <- sum(is_in_cluster(samples_of_recursion))
n_samples_out <- length(samples_of_recursion) - n_samples_in
if (n_samples_in < 3 | n_samples_out < 3) {return(c())}
groups <- factor(is_in_cluster(samples_of_recursion))
tmp <- get_over_expressed_features(selected_data$dataset, groups)
return(tmp)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
test
View(test)
test[(test$logFC>4) & (test$FDR<0.001),]
test[(test$logFC>3) & (test$FDR<0.001),]
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
test_results <- test_results$table[order(test_results$table$logFC), ]
return(test_results)
}
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
test_results <- test_results$table[order(test_results$table$logFC, decreasing=TRUE), ]
return(test_results)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
test
test[order(test$logFC),]
test[order(test$logFC, decreasing=TRUE),]
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
test_results <- test_results$table
test_results <- test_results[order(test_results$logFC, decreasing=TRUE), ]
return(test_results)
}
multeve_GetCharacteristicFeatures <- function(cluster, selected_data, params,
FC_threshold=4, pvalue_threshold=0.001, is_rna=TRUE) {
#' Get over-expressed features by calling the function `FindMarkers` of the edgeR package.
#' Only genes with logFC > 4 and FDR < 0.001 are returned.
#'
#' @param cluster a named lists, with five names:
#' `base_clusters`, `samples`, `clustering_methods`, `label` and `robustness`.
#' @param selected_data a named list, with two names: `dataset` and `SeuratObject`.
#' @param params a list of parameters (cf. `feve::get_parameters()`).
#' @param FC_threshold a numeric.
#' @param pvalue_threshold a numeric.
#' @param is_rna a boolean indicating if the data should be transformed.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
samples_of_recursion <- colnames(selected_data$dataset)
is_in_cluster <- function(sample) {ifelse(sample %in% cluster$samples, 1, 0)}
n_samples_in <- sum(is_in_cluster(samples_of_recursion))
n_samples_out <- length(samples_of_recursion) - n_samples_in
if (n_samples_in < 3 | n_samples_out < 3) {return(c())}
groups <- factor(is_in_cluster(samples_of_recursion))
tmp <- get_over_expressed_features(selected_data$dataset, groups)
return(tmp)
}
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.1, selected_data, params)
test
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.2, selected_data, params)
test
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.3, selected_data, params)
test
test <- multeve_GetCharacteristicFeatures(robust_clusters$C.4, selected_data, params)
rm(tmp)
test$logFC
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
test_results <- test_results$table
test_results <- test_results[order(test_results$logFC, decreasing=TRUE), ]
return(test_results)
}
multeve_GetCharacteristicFeatures <- function(cluster, selected_data, params,
FC_threshold=4, pvalue_threshold=0.001, is_rna=TRUE) {
#' Get over-expressed features by calling the function `FindMarkers` of the edgeR package.
#' Only genes with logFC > 4 and FDR < 0.001 are returned.
#'
#' @param cluster a named lists, with five names:
#' `base_clusters`, `samples`, `clustering_methods`, `label` and `robustness`.
#' @param selected_data a named list, with two names: `dataset` and `SeuratObject`.
#' @param params a list of parameters (cf. `feve::get_parameters()`).
#' @param FC_threshold a numeric.
#' @param pvalue_threshold a numeric.
#' @param is_rna a boolean indicating if the data should be transformed.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
samples_of_recursion <- colnames(selected_data$dataset)
is_in_cluster <- function(sample) {ifelse(sample %in% cluster$samples, 1, 0)}
n_samples_in <- sum(is_in_cluster(samples_of_recursion))
n_samples_out <- length(samples_of_recursion) - n_samples_in
if (n_samples_in < 3 | n_samples_out < 3) {return(c())}
groups <- factor(is_in_cluster(samples_of_recursion))
tmp <- get_over_expressed_features(selected_data$dataset, groups)
tmp <- tmp[(tmp$logFC>4) & (tmp$FDR<0.001),]
characteristic_features <- stats::setNames(tmp$logFC, rownames(tmp))
return(characteristic_features)
}
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
robust_clusters
get_over_expressed_features <- function(filtered_dataset, groups) {
#' Get the features over-expressed in an in-group (1), with regards to an out-group (0).
#'
#' @param filtered_dataset an -omics dataset, with variant features.
#' Its rows are features and its columns are samples.
#' @param groups an ordered vector of integers.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
tmp <- edgeR::DGEList(counts=filtered_dataset, group=groups)
tmp <- edgeR::estimateDisp(tmp)
test_results <- edgeR::exactTest(tmp)
test_results <- edgeR::topTags(test_results, n=nrow(test_results$table))
test_results <- test_results$table
test_results <- test_results[order(test_results$logFC, decreasing=TRUE), ]
return(test_results)
}
multeve_GetCharacteristicFeatures <- function(cluster, selected_data, params,
FC_threshold=4, pvalue_threshold=0.001, is_rna=TRUE) {
#' Get over-expressed features by calling the function `FindMarkers` of the edgeR package.
#' Only genes with logFC > 4 and FDR < 0.001 are returned.
#'
#' @param cluster a named lists, with five names:
#' `base_clusters`, `samples`, `clustering_methods`, `label` and `robustness`.
#' @param selected_data a named list, with two names: `dataset` and `SeuratObject`.
#' @param params a list of parameters (cf. `feve::get_parameters()`).
#' @param FC_threshold a numeric.
#' @param pvalue_threshold a numeric.
#' @param is_rna a boolean indicating if the data should be transformed.
#'
#' @return a named vector associating over-expressed features to their log2 fold-changes.
#'
samples_of_recursion <- colnames(selected_data$dataset)
is_in_cluster <- function(sample) {ifelse(sample %in% cluster$samples, 1, 0)}
n_samples_in <- sum(is_in_cluster(samples_of_recursion))
n_samples_out <- length(samples_of_recursion) - n_samples_in
if (n_samples_in < 3 | n_samples_out < 3) {return(c())}
groups <- factor(is_in_cluster(samples_of_recursion))
tmp <- get_over_expressed_features(selected_data$dataset, groups)
print(tmp)
tmp <- tmp[(tmp$logFC>4) & (tmp$FDR<0.001),]
characteristic_features <- stats::setNames(tmp$logFC, rownames(tmp))
return(characteristic_features)
}
params$characteristic_features_strategy <- multeve_GetCharacteristicFeatures
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
View(characterized_clusters)
draw_characteristic_features(characterized_clusters)
draw_robust_clusters(robust_clusters, selected_data)
draw_characteristic_features(characterized_clusters)
dataset_init <- read.table("datasets/aml/methy", header=TRUE, row.names=1)
population <- "C"
records <- initialize_records(dataset_init)
SeuratObject_init <- get_SeuratObject_init(dataset_init)
params <- get_parameters("scEVE")
params$selected_features_strategy <- multeve_GetSelectedFeatures
params$base_clusters_strategy <- multeve_GetBaseClusters
params$characteristic_features_strategy <- multeve_GetCharacteristicFeatures
selected_data <- get_selected_data(population, dataset_init, SeuratObject_init, records, params, figures=FALSE)
dim(dataset_init)
dim(selected_data$dataset)
draw_selected_data(population, SeuratObject_init, records)
base_clusters <- get_base_clusters(population, selected_data, params, figures=FALSE)
dataset_init
draw_base_clusters(selected_data$SeuratObject, base_clusters)
robust_clusters <- get_robust_clusters(population, base_clusters, selected_data, records, params, figures=FALSE)
draw_robust_clusters(robust_clusters, selected_data)
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
draw_characteristic_features(characterized_clusters)
draw_robust_clusters(robust_clusters, selected_data)
base_clusters <- get_base_clusters(population, selected_data, params, figures=FALSE)
draw_base_clusters(selected_data$SeuratObject, base_clusters)
dataset_init <- read.table("datasets/aml/mirna", header=TRUE, row.names=1)
population <- "C"
records <- initialize_records(dataset_init)
SeuratObject_init <- get_SeuratObject_init(dataset_init)
params <- get_parameters("scEVE")
params$selected_features_strategy <- multeve_GetSelectedFeatures
params$base_clusters_strategy <- multeve_GetBaseClusters
params$characteristic_features_strategy <- multeve_GetCharacteristicFeatures
selected_data <- get_selected_data(population, dataset_init, SeuratObject_init, records, params, figures=FALSE)
dim(dataset_init)
dim(selected_data$dataset)
draw_selected_data(population, SeuratObject_init, records)
base_clusters <- get_base_clusters(population, selected_data, params, figures=FALSE)
draw_base_clusters(selected_data$SeuratObject, base_clusters)
robust_clusters <- get_robust_clusters(population, base_clusters, selected_data, records, params, figures=FALSE)
draw_robust_clusters(robust_clusters, selected_data)
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
dataset_init <- read.table("datasets/aml/methy", header=TRUE, row.names=1)
population <- "C"
records <- initialize_records(dataset_init)
SeuratObject_init <- get_SeuratObject_init(dataset_init)
params <- get_parameters("scEVE")
params$selected_features_strategy <- multeve_GetSelectedFeatures
f <- function(selected_data, params) {multeve_GetBaseClusters(selected_data, params, is_rna=FALSE)}
params$base_clusters_strategy <- f
params$characteristic_features_strategy <- multeve_GetCharacteristicFeatures
selected_data <- get_selected_data(population, dataset_init, SeuratObject_init, records, params, figures=FALSE)
dim(dataset_init)
dim(selected_data$dataset)
draw_selected_data(population, SeuratObject_init, records)
base_clusters <- get_base_clusters(population, selected_data, params, figures=FALSE)
draw_base_clusters(selected_data$SeuratObject, base_clusters)
robust_clusters <- get_robust_clusters(population, base_clusters, selected_data, records, params, figures=FALSE)
draw_robust_clusters(robust_clusters, selected_data)
characterized_clusters <- get_characterized_clusters(population, robust_clusters, selected_data, params, figures=FALSE)
View(robust_clusters)
draw_robust_clusters(robust_clusters, selected_data)
data
dataset_init
View(dataset_init)
View(dataset_init)
clinical <- read.table("~/Téléchargements/clinical/aml", header=TRUE, row.names=1)
clinical <- read.table("~/Téléchargements/clinical/aml", header=TRUE)
clinical <- read.table("~/Téléchargements/clinical/aml", header=TRUE, sep="\t")
View(clinical)
usethis::use_package("cluster")
usethis::use_package("PINS")
usethis::use_package("SNFTool")
usethis::use_package("SNFtool")
usethis::use_package("NEMO")
usethis::use_package("PINSplus")
usethis::use_package("PINSPlus")
usethis::use_package("SNFtool")
usethis::use_package("edgeR")
devtools::check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
devtools::load_all(".")
library(feve)
data <- sceve_LoadData("Darmanis_HumGBM")
dataset_init <- data$dataset
ground_truth <- data$ground_truth
dim(dataset_init)
unique(ground_truth)
params <- get_parameters("scEVE")
data <- sceve_LoadData("Darmanis_HumGBM")
dataset_init <- data$dataset
params <- get_parameters("scEVE")
